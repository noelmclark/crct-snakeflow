include: "rules/common.smk"

##### Target Rules #####

# define rules that don't need to be run on a compute node.
# i.e. those that can be run locally.
localrules: all, echo_RG_fixed, genome_faidx, genome_dict, make_scaff_group_interval_lists, make_chromo_interval_lists, make_scatter_interval_lists,
# other local rules
# combine_bcftools_stats, gatk3_register, species_sample_lists, get_genome_length, get_ave_depths


rule all:
    input:
        "results/plink/allele-count/aut-bisnps-no5indel-rcnv-by-dvs",
        "results/plink/allele-count/aut-bisnps-no5indel-rcnv-by-cnv"
        #"results/plink/bed/MAC3/aut-bisnps-no5indel-rcnv-by-dvs-nooutlier-MAC3",
        #"results/plink/bed/MAC3/aut-bisnps-no5indel-rcnv-by-cnv-nooutlier-MAC3",
        #"results/plink/pca/MAC3/aut-bisnps-no5indel-rcnv-by-dvs-nooutlier-MAC3-pca",
        #"results/plink/pca/MAC3/aut-bisnps-no5indel-rcnv-by-cnv-nooutlier-MAC3-pca",
        #"results/plink/phylip/MAC3/aut-bisnps-no5indel-rcnv-by-dvs-nooutlier-MAC3",
        #"results/plink/phylip/MAC3/aut-bisnps-no5indel-rcnv-by-cnv-nooutlier-MAC3",
        #expand("results/plink/gt-count/MAC3/{s}-aut-bisnps-no5indel-rcnv-by-dvs-MAC3", s=sample_list),
        #expand("results/plink/gt-count/MAC3/{s}-aut-bisnps-no5indel-rcnv-by-cnv-MAC3", s=sample_list),
        #expand("results/inbreeding/het/from-plink-gt-counts/MAC3/{s}-aut-bisnps-no5indel-MAC3.txt", s=sample_list),
        #"results/tree/MAC3/aut-bisnps-no5indel-nooutlier-MAC3-tree",
        #"results/inbreeding/het/MAC3/aut-bisnps-no5indel-MAC3.tsv",
       
        #rCNV outputs
        #expand("results/scatter_config/scatters_{bs}.tsv", bs=binsize), #generate scatters file from scatter_intervals_file
        #expand("results/rCNV-by-scat/vcf/aut-bisnp-no5indel-{scat}.vcf", scat=unique_scats),
        #"results/rCNV-by-scat/dvs-cnv-targets/aut-bisnp-no5indel_dvs_targets.tsv",
        #"results/rCNV-by-scat/dvs-cnv-targets/aut-bisnp-no5indel_cnv_targets.tsv",
        #"results/rCNV-by-scat/dvs-cnv-targets/aut-bisnp-no5indel_dvs_targets.tsv.gz",
        #"results/rCNV-by-scat/dvs-cnv-targets/aut-bisnp-no5indel_cnv_targets.tsv.gz",
        #"results/bcf/aut-bisnps-no5indel-rcnv-by-dvs.bcf",
        #"results/bcf/aut-bisnps-no5indel-rcnv-by-cnv.bcf",
        #"results/hdplot/all-samples/all-hdplot-output.tsv",
        #"results/hdplot/srm-samples/srm-hdplot-output.tsv",

        #expand("results/admixture/srm-subset/1pop-abrams/abrams-aut-bisnps-no5indel-{popk}.out", popk=onepopkclusters),
        #expand("results/admixture/srm-subset/1pop-kelso/kelso-aut-bisnps-no5indel-{popk}.out", popk=onepopkclusters),
        #"results/plink/srm-subset/1pop-abrams/bed/MAC1/abrams-aut-bisnps-no5indel-MAC1",
        #"results/plink/srm-subset/1pop-kelso/bed/MAC1/kelso-aut-bisnps-no5indel-MAC1"
        #"results/plink/srm-subset/1pop-abrams/allele-count/abrams-aut-bisnps-no5indel",
        #"results/plink/srm-subset/1pop-kelso/allele-count/kelso-aut-bisnps-no5indel",
        #"results/plink/srm-subset/1pop-abrams/make-pgen/abrams-aut-bisnps-no5indel",
        #"results/plink/srm-subset/1pop-kelso/make-pgen/kelso-aut-bisnps-no5indel",
        
        #SRM subset admixture output files
        #expand("results/admixture/srm-subset/srm-aut-bisnps-no5indel-{srmk}.out", srmk=srmkclusters),
        #"results/plink/srm-subset/bed/MAC1/srm-aut-bisnps-no5indel-MAC1",
        #"results/plink/srm-subset/pca/MAC1/srm-aut-bisnps-no5indel-MAC1-pca"
        #"results/plink/srm-subset/allele-count/srm-aut-bisnps-no5indel"
        #"results/plink/srm-subset/make-pgen/srm-aut-bisnps-no5indel"
        
        
        #expand("results/admixture/CV_5/MAC1/aut-bisnps-no5indel-nooutlier-MAC1-{k}.out", k=kclusters),
        #"results/inbreeding/het/raw-het/combined-het-stats.tsv"
        #expand("results/qc/bcftools_stats/{s}-stats-aut-bisnps-no5indel.txt", s=sample_list),
        #expand("results/qc/bcftools_stats/{s}-stats-all-callable-sites.txt", s=sample_list),

        #"results/admixture/CV_5/aut-bisnps-no5indel-nooutlier-MAC5.cv5.error"
        #expand("results/admixture/CV_5/MAC1/aut-bisnps-no5indel-nooutlier-MAC1-{k}.out", k=kclusters),
        #expand("results/admixture/CV_5/MAC3/aut-bisnps-no5indel-nooutlier-MAC3-{k}.out", k=kclusters),
        #expand("results/admixture/CV_5/MAC5/aut-bisnps-no5indel-nooutlier-MAC5-{k}.out", k=kclusters),

            
        #mac>5 filter
        #"results/plink/bed/MAC5/aut-bisnps-no5indel-nooutlier-MAC5",
        #"results/plink/pca/MAC5/aut-bisnps-no5indel-nooutlier-MAC5-pca",
        #"results/plink/phylip/MAC5/aut-bisnps-no5indel-nooutlier-MAC5",
        #expand("results/plink/gt-count/MAC5/{s}-aut-bisnps-no5indel-MAC5", s=sample_list),
        #expand("results/inbreeding/het/from-plink-gt-counts/MAC5/{s}-aut-bisnps-no5indel-MAC5.txt", s=sample_list),
        #"results/tree/MAC5/aut-bisnps-no5indel-nooutlier-MAC5-tree",
        #"results/inbreeding/het/MAC5/aut-bisnps-no5indel-MAC5.tsv",

        #mac>3 filter
        #"results/plink/bed/MAC3/aut-bisnps-no5indel-nooutlier-MAC3",
        #"results/plink/pca/MAC3/aut-bisnps-no5indel-nooutlier-MAC3-pca",
        #"results/plink/phylip/MAC3/aut-bisnps-no5indel-nooutlier-MAC3",
        #expand("results/plink/gt-count/MAC3/{s}-aut-bisnps-no5indel-MAC3", s=sample_list),
        #expand("results/inbreeding/het/from-plink-gt-counts/MAC3/{s}-aut-bisnps-no5indel-MAC3.txt", s=sample_list),
        #"results/tree/MAC3/aut-bisnps-no5indel-nooutlier-MAC3-tree",
        #"results/inbreeding/het/MAC3/aut-bisnps-no5indel-MAC3.tsv",

        #mac>1 filter
        #"results/plink/bed/MAC1/aut-bisnps-no5indel-nooutlier-MAC1",
        #"results/plink/pca/MAC1/aut-bisnps-no5indel-nooutlier-MAC1-pca",
        #"results/plink/phylip/MAC1/aut-bisnps-no5indel-nooutlier-MAC1",
        #expand("results/plink/gt-count/MAC1/{s}-aut-bisnps-no5indel-MAC1", s=sample_list),
        #expand("results/inbreeding/het/from-plink-gt-counts/MAC1/{s}-aut-bisnps-no5indel-MAC1.txt", s=sample_list),
        #"results/tree/MAC1/aut-bisnps-no5indel-nooutlier-MAC1-tree",
        #"results/inbreeding/het/MAC1/aut-bisnps-no5indel-MAC1.tsv",
        
        #new - no MAC filters
        #expand("results/admixture/CV_5/aut-bisnps-no5indel-{k}.out", k=kclusters),
        #"results/inbreeding/het/aut-bisnps-no5indel.tsv"
        #"results/tree/aut-bisnps-no5indel-tree",
        #"results/plink/bed/aut-bisnps-no5indel",
        #"results/plink/pca/aut-bisnps-no5indel-pca",
        #"results/plink/phylip/aut-bisnps-no5indel",
        #expand("results/plink/gt-count/{s}-aut-bisnps-no5indel", s=sample_list),

        #old before committee meeting
        #expand("results/inbreeding/het/{s}-het-perc.txt", s=sample_list),
        #"results/inbreeding/het/combined-het-percents.tsv",
        
        
        #mapping outputs
        #expand("results/mapping/mkdup/mkdup-{s}.bam", s=sample_list), #mapping final output
        #expand("results/mapping/gatk-rmdup/{s}.bam", s=sample_list), #mapping rmdup final output

        #calling outputs 
        #expand("results/calling/interval_lists/{scaff_group}.list", scaff_group=unique_scaff_groups),
        #expand("results/calling/interval_lists/{chromo}.list", chromo=unique_chromosomes),
        #expand("results/calling/vcf_sections/{sgc}/{scat}.vcf.gz", sgc=sg_or_chrom, scat=unique_scats),
        #expand("results/calling/vcf_sections/{sgc}.vcf.gz", sgc=sg_or_chrom),
        #expand("results/calling/genomics_db/{sgc}", sgc=sg_or_chrom), #calling intermediate output
        #expand("results/calling/gvcf/{s}.{ext}", s=sample, ext = ["g.vcf.gz", "g.vcf.gz.tbi"]), #calling intermediate output
        #expand("results/vcf_sections/{sgc}.{ext}", sgc=sg_or_chrom, ext = ["vcf.gz", "vcf.gz.tbi"]), #calling intermediate output
        #expand("results/scatter_config/scatters_{bs}.tsv", bs=binsize), #generate scatters file from scatter_intervals_file
        #expand("results/calling/corrected_missing_vcf_sect/{sgc}.vcf.gz", sgc=sg_or_chrom), 
        #expand("results/calling/corrected_missing_vcf_sect/all_callable_sites/{sgc}.vcf.gz", sgc=sg_or_chrom),
        
        #hardfiltering outputs
        #"results/bcf/all.bcf", 
        #"results/bcf/all.bcf.csi", 
        #"results/bcf/all-filtered.bcf",
        #"results/bcf/aut-bisnps.bcf",
        #"results/bcf/aut-bisnps-no5indel.bcf",
        #"results/bcf/all_callable_sites/all_callable_sites.bcf",
        #"results/bcf/all_callable_sites/aut_bisnps_all_callable_sites.bcf",
        #expand("results/bcf/{b}-aut-bisnps-maf-0.05.bcf", b=bcfsubsamp),
        #"results/bcf/filt_biallelic_maf_0.05/main.bcf"

        #PSMC outputs
        #expand("results/psmc/remove-sex-bams/aut_{s}.bam", s=sample_list),
        #expand("results/psmc/psmc-consensus-sequence/{s}.fq.gz", s=sample_list)
        #expand("results/psmc/psmcfa/{s}.psmcfa", s=sample_list)
        #expand("results/psmc/run-psmc/{s}.psmc", s=sample_list),
        #expand("results/psmc/psmc-plot/{subsamp}/{subsamp}", subsamp=subsamp),

        #hpsmc outputs
        #expand("results/hpsmc/haploidize_bam_sect/{s}/{chrom}_haploidized.fa", s=sample_list, chrom=unique_chromosomes)
        #expand("results/hpsmc/haploidized_bam/{hp}_haploidized.fa", hp=hpsmcpops),
        #expand("results/hpsmc/psmcfa-from-2-fastas/{p1}---x---{p2}.psmcfa", p1=pop1, p2=pop2),
        #expand("results/hpsmc/run-hpsmc/{p1}---x---{p2}.psmc", p1=pop1, p2=pop2),
        #expand("results/hpsmc/hpsmc-plot/{p1}---x---{p2}", p1=pop1, p2=pop2),
        #"results/hpsmc/split-time-sim/w_fk_boulder---x---steelman/w_fk_boulder---x---steelman",

        #plink outputs
        #expand("results/plink/allele-freq/pop-counts/aut-snps-{maf}", maf=mafs),
        #expand("results/plink/pca/aut-snps-{maf}-ld-pruned-pca", maf=mafs),
        #"results/plink/pw-fst-all/fst-all", 
        #"results/plink/pw-fst-snps-0.05/fst-snps-0.05",
        #expand("results/plink/pca/aut-snps-{maf}-pca", maf=mafs),

        #qc outputs
        #expand("results/qc/samtools_stats/{s}.txt", s=sample_list),
        #expand("results/qc/bcftools_stats/all-{fc}.txt", fc=["ALL", "PASS", "FAIL"],),
        #expand("results/qc/bcftools_stats/all-pass-maf-{maf}.txt", maf=mafs,),
        #expand("results/qc/bcftools_stats/all-pass-maf-{maf}.txt", maf=config["bqsr_maf"], bq=[str(x) for x in range(0, int(config["bqsr_rounds"])+1)]),
        #expand("results/qc/coverage-depth/{s}.txt", s=sample_list),
        #"results/qc/coverage-depth/avg-count/above-10.txt",
        #"results/qc/coverage-depth/avg-count/avg-depth.txt",

        #installing flagfiles 
        #"results/flags/chromcompare_installed",
        #"results/flags/pcangsd_installed",

        #misc outputs
        #expand("results/roh/allele-freq/snps-maf-0.05/{pop}-freqs.tabs.gz", pop=population),
        #expand("results/roh/snps-maf-0.05/{pop}-roh.txt", pop=population)
        #expand("results/angsd_bams/overlap_clipped/{s}.bam", s=sample_list), #angsd-bams output
        #expand("results/angsd_bams/echo-RG-fixed/{s}.txt", s=sample_list), #troubleshooting RG errors
        


##### Modules #####

include: "rules/mapping.smk"
include: "rules/calling.smk"
include: "rules/hardfilter.smk"
include: "rules/ref.smk"
include: "rules/angsd-ready-bams.smk"
include: "rules/psmc.smk"
include: "rules/hpsmc.smk"
include: "rules/qc.smk"
include: "rules/destination-rules.smk"
include: "rules/plink.smk"
include: "rules/plink-srm.smk"
include: "rules/inbreeding.smk"
include: "rules/tree.smk"
include: "rules/admixture.smk"
include: "rules/hdplot.smk"
include: "rules/rCNV.smk"
include: "rules/plink-rCNV.smk"
#include: "rules/archive.smk"
#include: "rules/annotation.smk"
#include: "rules/downsample.smk"
#include: "rules/force-call-vcf.smk"