include: "rules/common.smk"

##### Target Rules #####

# define rules that don't need to be run on a compute node.
# i.e. those that can be run locally.
localrules: all, genome_faidx, genome_dict
# other local rules
# combine_bcftools_stats, gatk3_register, species_sample_lists, get_genome_length, , make_scaff_group_interval_lists, make_chromo_interval_lists, make_scatter_interval_lists, get_ave_depths


rule all:
    input:
        expand("results/mapping/mkdup/mkdup-{s}.bam", s=sample_list), #mapping final output
        #expand("results/calling/corrected_missing_vcf_sect/{sgc}.vcf.gz", sgc=sg_or_chrom), #calling final output
        #expand("results/scatter_config/scatters_{bs}.tsv", bs=binsize),
        #expand("results/bcf/all.bcf"), #hardfiltering final outputs
        #expand("results/bcf/all.bcf.csi"), #hardfiltering final outputs
        #expand("results/bcf/all-that-pass-maf-{maf}.bcf", maf=mafs,), #hardfiltering final outputs
        #expand("results/bcf/all-that-pass-maf-{maf}.bcf.csi", maf=mafs,), #hardfiltering final outputs

        #expand("results/calling/genomics_db/{sgc}", sgc=sg_or_chrom), #calling intermediate output
        #expand("results/calling/gvcf/{s}.{ext}", s=sample, ext = ["g.vcf.gz", "g.vcf.gz.tbi"]), #calling intermediate output
        #expand("results/vcf_sections/{sgc}.{ext}", sgc=sg_or_chrom, ext = ["vcf.gz", "vcf.gz.tbi"]), #calling intermediate output

        #expand("results/overlap_clipped/{samp}.{ext}", samp=sample_list, ext = ["bam", "bam.bai"]), #angsd-ready-bams output
        
        #expand("results/qc/bcftools_stats/all-{fc}.txt", fc=["ALL", "PASS", "FAIL"],),
        #expand("results/qc/bcftools_stats/all-pass-maf-{maf}.txt", maf=mafs,),
        #expand("results/qc/multiqc.html", bq=[str(x) for x in range(0, int(config["bqsr_rounds"])+1)]),
        #expand("results/qc/bcftools_stats/all-pass-maf-{maf}.txt", maf=config["bqsr_maf"], bq=[str(x) for x in range(0, int(config["bqsr_rounds"])+1)]),
        #expand("results/DS_control/sample_info.tsv", bq=[str(x) for x in range(0, int(config["bqsr_rounds"])+1)]),
        #realigned_bams_output_list
        #expand("results/psmc-plot/{s}.eps", s=SAMPLES),
        #expand("results/qc/coverage/{s}.txt", s=SAMPLES),
        #"annotated/all.vcf.gz",
        #"qc/multiqc.html",
        #"plots/depths.svg",
        #"plots/allele-freqs.svg",
        


##### Modules #####

include: "rules/ref.smk"
include: "rules/mapping.smk"
#include: "rules/angsd-ready-bams.smk"
#include: "rules/calling.smk"
#include: "rules/hardfilter.smk"
#include: "rules/psmc.smk"
#include: "rules/stats.smk"
#include: "rules/qc.smk"
include: "rules/destination-rules.smk"
#include: "rules/archive.smk"
#include: "rules/annotation.smk"
#include: "rules/downsample.smk"
#include: "rules/force-call-vcf.smk"